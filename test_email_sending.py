#!/usr/bin/env python3
"""
Test script for email sending functionality.
"""

import sys
import os
from pathlib import Path

# Add src to Python path
sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.email_processing.sender import EmailSender
from src.ai.topic_generator import TopicGenerator
from src.config.config_manager import get_config
from src.utils.logger import get_logger


def test_email_sending():
    """Test the email sending functionality."""
    logger = get_logger("test_email")
    
    try:
        logger.info("Testing email sending functionality...")
        
        # Initialize email sender
        email_sender = EmailSender()
        
        # Test connection
        if not email_sender.test_connection():
            logger.error("‚ùå Email sender connection test failed")
            return False
        
        logger.info("‚úÖ Email sender connection test passed")
        
        # Test sending a simple email
        test_subject = "üß™ Email Scanner Test - Email Sending"
        test_body = """
        <html>
        <body style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
            <h1 style="color: #1976d2;">üß™ Email Scanner Test</h1>
            <p>This is a test email to verify that the email sending functionality is working correctly.</p>
            <p><strong>Features tested:</strong></p>
            <ul>
                <li>‚úÖ Gmail API connection</li>
                <li>‚úÖ Email composition</li>
                <li>‚úÖ HTML email formatting</li>
                <li>‚úÖ Email delivery</li>
            </ul>
            <hr>
            <p><small>Generated by Email Scanner & Blog Topic Generator</small></p>
        </body>
        </html>
        """
        
        # Get notification email from config
        config = get_config()
        recipient = config.notifications.notification_email
        
        if not recipient:
            logger.error("‚ùå No notification email configured. Please set NOTIFICATION_EMAIL in your environment.")
            return False
        
        logger.info(f"Sending test email to: {recipient}")
        
        # Send test email
        success = email_sender.send_email(
            to=recipient,
            subject=test_subject,
            body=test_body,
            body_type='html'
        )
        
        if success:
            logger.info("‚úÖ Test email sent successfully!")
            return True
        else:
            logger.error("‚ùå Test email failed to send")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå Error during email sending test: {e}")
        return False


def test_topic_generation():
    """Test the topic generation functionality."""
    logger = get_logger("test_topics")
    
    try:
        logger.info("Testing topic generation functionality...")
        
        # Initialize topic generator
        topic_generator = TopicGenerator()
        
        # Test connection
        if not topic_generator.test_connection():
            logger.error("‚ùå Topic generator connection test failed")
            return False
        
        logger.info("‚úÖ Topic generator connection test passed")
        
        # Test with sample email data
        sample_emails = [
            {
                'subject': 'New Python Framework Released',
                'content': 'A new Python web framework has been released with improved performance and better developer experience. The framework includes built-in support for async operations and modern web standards.',
                'from': 'tech@example.com',
                'category': 'tech'
            },
            {
                'subject': 'Weekly Developer Newsletter',
                'content': 'This week we cover the latest in web development, including new JavaScript features, CSS improvements, and developer tools that can boost your productivity.',
                'from': 'newsletter@dev.com',
                'category': 'newsletter'
            }
        ]
        
        logger.info("Generating topics from sample emails...")
        topics = topic_generator.generate_topics(sample_emails)
        
        if topics:
            logger.info(f"‚úÖ Generated {len(topics)} topics successfully!")
            for i, topic in enumerate(topics, 1):
                logger.info(f"  {i}. {topic.get('title', 'Untitled')}")
            return True
        else:
            logger.warning("‚ö†Ô∏è No topics generated from sample emails")
            return True  # Not necessarily an error
            
    except Exception as e:
        logger.error(f"‚ùå Error during topic generation test: {e}")
        return False


def main():
    """Run all tests."""
    print("üß™ Email Scanner & Blog Topic Generator - Test Suite")
    print("=" * 60)
    
    # Test email sending
    print("\n1. Testing Email Sending...")
    email_success = test_email_sending()
    
    # Test topic generation
    print("\n2. Testing Topic Generation...")
    topic_success = test_topic_generation()
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä Test Results Summary:")
    print(f"   Email Sending: {'‚úÖ PASSED' if email_success else '‚ùå FAILED'}")
    print(f"   Topic Generation: {'‚úÖ PASSED' if topic_success else '‚ùå FAILED'}")
    
    if email_success and topic_success:
        print("\nüéâ All tests passed! The email sending feature is ready to use.")
        return 0
    else:
        print("\n‚ö†Ô∏è Some tests failed. Please check the configuration and try again.")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 